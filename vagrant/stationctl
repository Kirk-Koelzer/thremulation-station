#!/bin/bash -eu

set -o pipefail

# TODOLIST:
# [ ] os detection for banner stats
#     [x] macos
#     [ ] linux
#     [ ] other
# [ ] "selection invalid" styling
# [ ] make "status output" green bold


###############################################################################
# os detection
###############################################################################

unameOut="$(uname -s)"
case "${unameOut}" in
    Linux*)     machine=Linux;;
    Darwin*)    machine=Mac;;
    CYGWIN*)    machine=Cygwin;;
    MINGW*)     machine=MinGw;;
    *)          machine="UNKNOWN:${unameOut}"
esac

###############################################################################
# define variables
###############################################################################

# boxes
ELASTOMIC="ts.elastomic"
WINDOWS="ts.windows10"
CENTOS="ts.centos7"


# host stats
MACCPU=`top -l 1 | grep -E "^CPU" | grep -Eo '[^[:space:]]+%' | head -1`
MACMEM=`top -l 1 | grep -E "^Phys" | awk '{print $2}'`
MACDISK=`df -Ph | grep "/dev/disk1s1s1" | awk '{print $5}'`
#MACCPU=`top -l 1 | grep -E "^CPU" | awk '{print $3}'`

NOTMACCPU="TODO"
NOTMACMEM="TODO"
NOTMACDISK="TODO"

# colors
RED='\033[0;31m'
LIGHTRED='\033[1;31m'
GREEN='\033[0;32m'
LIGHTGREEN='\033[1;32m'
LIGHTPURPLE='\033[1;35m'
LIGHTGRAY='\033[0;37m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color


###############################################################################
# define functions
###############################################################################


### Main Menu
main() {
    while true; do
        clear
        echo -e "${LIGHTPURPLE}    ________                      __     __  _${NC}            ";
        echo -e "${LIGHTPURPLE}   /_  __/ /  _______ __ _  __ __/ /__ _/ /_(_)__  ___  ${NC}  ";
        echo -e "${LIGHTPURPLE}    / / / _ \/ __/ -_)  ' \/ // / / _ \/ __/ / _ \/ _ \ ${NC}  ";
        echo -e "${LIGHTPURPLE}   /_/ /_//_/_/  \__/_/_/_/\_,_/_/\_,_/\__/_/\___/_//_/ ${NC}  ";
        echo -e "${LIGHTPURPLE}    ______       __  _                                  ${NC}  ";
        echo -e "${LIGHTPURPLE}   / __/ /____ _/ /_(_)__  ___  ${NC}    CPU usage..: $CPU     ";
        echo -e "${LIGHTPURPLE}  _\ \/ __/ _ \/ __/ / _ \/ _ \ ${NC}    Memory used: $MEM     ";
        echo -e "${LIGHTPURPLE} /___/\__/\_,_/\__/_/\___/_//_/ ${NC}    Disk usage.: $DISK    ";
        echo ""
        echo -e "${LIGHTPURPLE} ------------------------------------------------------${NC}";
        echo -e ""
        echo " 1. Deploy New Thremulation Proving Ground"
        echo " 2. Show Status - current deployment"
        echo " 3. Management  - current deployment"
        echo ""
        read -rp " Select Above Option [or (E)xit]: " yn
        case $yn in
            [1]* ) deploy; break;;
            [2]* ) status; break;;
            [3]* ) manage; break;;
            [Ee]* ) echo "Exiting..."; sleep 1; clear; break;;
            * ) echo "Selection invalid, try again: "; sleep 1;;
        esac
    done
}


# Main deployment screen, ask for quick or custom
deploy() {
    while true; do
        clear
        echo -e "${LIGHTPURPLE}      __________  ___           __            ${NC}";
        echo -e "${LIGHTPURPLE}     /_  __/ __/ / _ \___ ___  / /__  __ __   ${NC}";
        echo -e "${LIGHTPURPLE}      / / _\ \  / // / -_) _ \/ / _ \/ // /   ${NC}";
        echo -e "${LIGHTPURPLE}     /_/ /___/ /____/\__/ .__/_/\___/\_, /    ${NC}";
        echo -e "${LIGHTPURPLE}                       /_/          /___/     ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                           ${NC}";
        echo -e "${LIGHTPURPLE} ---------------------------------------------${NC}";
        echo ""
        echo "1. Quick Deployment - deploy all target boxes"
        echo "2. Custom Deployment - choose targets you want"
        echo ""
        read -rp " Select Above Option: " yn
        case $yn in
            [1]* ) deploy_quick; break;;
            [2]* ) deploy_custom; break;;
            [Bb]* ) clear; main;break;;
            * ) echo "Selection invalid, try again: ";;
        esac
    done
}


# Quick deploy is all the things
deploy_quick() {
    while true; do
        clear
        echo -e "${LIGHTPURPLE}      __________  ___           __            ${NC}";
        echo -e "${LIGHTPURPLE}     /_  __/ __/ / _ \___ ___  / /__  __ __   ${NC}";
        echo -e "${LIGHTPURPLE}      / / _\ \  / // / -_) _ \/ / _ \/ // /   ${NC}";
        echo -e "${LIGHTPURPLE}     /_/ /___/ /____/\__/ .__/_/\___/\_, /    ${NC}";
        echo -e "${LIGHTPURPLE}                       /_/          /___/     ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                           ${NC}";
        echo -e "${LIGHTPURPLE} ---------------------------------------------${NC}";
        echo ""
        echo "You have chosen to Quick-Deploy all boxes."
        echo "This includes the following configuration:"
        echo ""
        echo "     Elastomic   -- EMULATE and DETECT"
        echo ""
        echo "     Windows 10  -- Windows target box"
        echo ""
        echo "     CentOS 7    -- Linux target box"
        echo ""
        read -rp "Would you like to proceed? [Y/N]: " yn
        case $yn in
            [Yy]* )
                echo ""
                echo "Deploying all boxes with vagrant up!";
                vagrant up;
                sleep 5;
                echo "Capturing snapshot of clean environment...";
                snapshot;
                break;;
            [Nn]* ) deploy; break;;
            [Bb]* ) clear; deploy;break;;
            * ) echo "Selection invalid, try again: "; sleep 1;;
        esac
    done
}


# Custom deploy consists of elastomic box PLUS:
deploy_custom() {
    while true; do
        clear
        echo -e "${LIGHTPURPLE}      __________  ___           __            ${NC}";
        echo -e "${LIGHTPURPLE}     /_  __/ __/ / _ \___ ___  / /__  __ __   ${NC}";
        echo -e "${LIGHTPURPLE}      / / _\ \  / // / -_) _ \/ / _ \/ // /   ${NC}";
        echo -e "${LIGHTPURPLE}     /_/ /___/ /____/\__/ .__/_/\___/\_, /    ${NC}";
        echo -e "${LIGHTPURPLE}                       /_/          /___/     ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                           ${NC}";
        echo -e "${LIGHTPURPLE} ---------------------------------------------${NC}";
        echo ""
        echo "The Elastomic (control) box is required."
        echo "What TARGET boxes would you like to deploy?"
        echo ""
        read -rp "Deploy the Windows10 target? [Y/N]: " yn
        case $yn in
            [Yy]* ) WINDOWS="ts.windows10"; break;;
            [Nn]* ) WINDOWS=""; break;;
            * ) echo "Selection invalid, try again: "; sleep 1;;
        esac
    done
    while true; do
        clear
        echo -e "${LIGHTPURPLE}      __________  ___           __            ${NC}";
        echo -e "${LIGHTPURPLE}     /_  __/ __/ / _ \___ ___  / /__  __ __   ${NC}";
        echo -e "${LIGHTPURPLE}      / / _\ \  / // / -_) _ \/ / _ \/ // /   ${NC}";
        echo -e "${LIGHTPURPLE}     /_/ /___/ /____/\__/ .__/_/\___/\_, /    ${NC}";
        echo -e "${LIGHTPURPLE}                       /_/          /___/     ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                           ${NC}";
        echo -e "${LIGHTPURPLE} ---------------------------------------------${NC}";
        echo ""
        read -rp "Deploy the Centos7 target? [Y/N]: " yn
        case $yn in
            [Yy]* ) CENTOS="ts.centos7"; break;;
            [Nn]* ) CENTOS=""; break;;
            [Bb]* ) clear; deploy; break;;
            * ) echo "Selection invalid, try again.";;
        esac
    done
    while true; do
        clear
        echo -e "${LIGHTPURPLE}      __________  ___           __            ${NC}";
        echo -e "${LIGHTPURPLE}     /_  __/ __/ / _ \___ ___  / /__  __ __   ${NC}";
        echo -e "${LIGHTPURPLE}      / / _\ \  / // / -_) _ \/ / _ \/ // /   ${NC}";
        echo -e "${LIGHTPURPLE}     /_/ /___/ /____/\__/ .__/_/\___/\_, /    ${NC}";
        echo -e "${LIGHTPURPLE}                       /_/          /___/     ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                           ${NC}";
        echo -e "${LIGHTPURPLE} ---------------------------------------------${NC}";
        echo ""
        echo ""
        echo "You have chosen the following Custom Deployment:"
        echo ""
        echo "- CONTROL..: ts.elastomic (required)"
        echo "- target...: ${WINDOWS}"
        echo "- target...: ${CENTOS}"
        echo ""
        read -rp "Confirm to proceed with deployment [Y/N]: " yn
        case $yn in
            [Yy]* ) vagrant up ts.elastomic "${CENTOS}" "${WINDOWS}"; sleep 20; snapshot; break;;
            [Nn]* ) deploy; break;;
            [Bb]* ) clear; main; break;;
            * ) echo "Selection invalid, try again: "; sleep 1;;
        esac
    done
}


# Display the status of current environment
status() {
    while true; do
        clear
        echo -e "${LIGHTPURPLE}      __________     ______       __          ${NC}";
        echo -e "${LIGHTPURPLE}     /_  __/ __/    / __/ /____ _/ /___ _____ ${NC}";
        echo -e "${LIGHTPURPLE}      / / _\ \     _\ \/ __/ _ \/ __/ // (_-< ${NC}";
        echo -e "${LIGHTPURPLE}     /_/ /___/    /___/\__/\_,_/\__/\_,_/___/ ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                           ${NC}";
        echo -e "${LIGHTPURPLE} ---------------------------------------------${NC}";
        echo ""
        echo "Range Box Status:"
        # how are things here
        echo -e "${LIGHTPURPLE}------------------${NC}";
        echo ""
        vagrant status ts.elastomic "${WINDOWS}" "${CENTOS}"
        echo ""
        sleep 2
        echo -e "${LIGHTPURPLE}------------------${NC}";
        echo ""
        echo "Elasticsearch Service Status:"
        echo "(yellow) is expected with only 1 node:"
        echo ""
        status_indexes
        echo ""
        sleep 2
        echo ""
        echo -e "${LIGHTPURPLE}------------------${NC}";
        echo ""
        echo "Kibana Service Status: '200' ==  everything is OK"
        echo "Status: "; curl -s -o /dev/null -w "%{http_code}" -kIu vagrant:vagrant http://192.168.33.10:5601/api/status
        echo ""
        sleep 2
        echo ""
        echo ""
        read- rp "Return to (M)ain Menu or (E)xit Program? " yn
        case $yn in
            [Mm]* ) main; break;;
            [Ee]* ) clear; break;;
            * ) echo "Selection invalid, try again: "; sleep 1;;
        esac
    done
}


# Checks the elasticsearch index health that lives on the elastomic box
status_indexes() {
    curl -X GET "192.168.33.10:9200/_cluster/health?pretty"
}


# Curl the Elasticsearch API to dump the index, not the index pattern
# Resetting that would be a pain to do over and over and over...
delete_indexes() {
    curl -X GET "192.168.33.10:9200/_cat/indices"
    curl -X DELETE "192.168.33.10:9200/logs-*"
    curl -X DELETE "192.168.33.10:9200/winlogbeat-*"
}


# Function to perform management tasks
manage() {
    while true; do
        clear
        echo -e "${LIGHTPURPLE}    __________     __  ___${NC}";
        echo -e "${LIGHTPURPLE}   /_  __/ __/    /  |/  /__ ____  ___ ____ ____ ${NC}";
        echo -e "${LIGHTPURPLE}    / / _\ \     / /|_/ / _ \/ _ \/ _ \/ _ \/ -_)${NC}";
        echo -e "${LIGHTPURPLE}   /_/ /___/    /_/  /_/\_,_/_//_/\_,_/\_, /\__/ ${NC}";
        echo -e "${LIGHTPURPLE}                                      /___/      ${NC}";
        echo -e "${LIGHTPURPLE}   (B)ack to Main                                ${NC}";
        echo -e "${LIGHTPURPLE} ----------------------------------------------    ${NC}";
        echo ""
        echo "1. Update - update boxes to latest version"
        echo "2. Reboot - restart boxes (troubleshooting)"
        echo "3. Clear Data - delete data in all indexes"
        echo "4. Soft Reset - revert to original snapshots"
        echo "5. Hard Reset - destroy and redeploy all boxes"
        echo "6. Nuke and Pave - Burn it down and start over"
        echo ""
        read -rp " Select Above Option: " yn
        case $yn in
            [1]* ) echo "Updating boxes to the latest version, pulling from vagrant cloud"; vagrant box update; break;; # may need -f
            [2]* ) echo "Rebooting Boxes..."; vagrant reload; sleep 15; break;;
            [3]* ) echo "Clearing All Indexes..."; delete_indexes; sleep 15; break;; # run status_indexes
            [4]* ) echo "Performing Soft Reset -- reverting to initial snapshot..."; snapshot_restore; break;;
            [5]* ) echo "Performing Hard Reset -- deleting VMs but keeping local boxes"; vagrant destroy -f; break;;
            [6]* ) echo "Nuke and Pave, it's as bad as it sounds...your starting from nothing."; nuke_pave; break;; # TODO add confirmation for this.
            [Bb]* ) clear; main;break;;
            * ) echo "Selection invalid, try again: "; sleep 1;;
        esac
    done
}


# Checks to see if vagrant exists
requirements() {
if ! command -v vagrant &> /dev/null
then
    echo ""
    echo "Error: Vagrant is not installed or cannot be found!"
    echo "Please reference docs.thremulation.io for"
    echo "setup instructions."
    exit
fi
}


# Creates a snapshot just in case things go pear-shaped
snapshot() {
    echo " Creating Snapshot...just in case"
    for machine in elastomic centos7 windows10
    do
        vagrant snapshot save ts."$machine" ts."$machine"_initial
    done
    echo "This may take some time... waiting 30 secs"
}


# restores initial snapshot if things have indeed gone pear-shaped
snapshot_restore() {
    echo "Restoring Snapshot..."
    for machine in elastomic centos7 windows10
    do
        vagrant snapshot restore ts."$machine" ts."$machine"_initial
    done
    echo "This may take some time... waiting 30 secs"
}


# This is as bad as it sounds, EVERYTHING dies...EVERYTHING!
nuke_pave() {
    echo "Burn Baby Burn..."
    for machine in elastomic centos7 windows10
    do
        vagrant destroy -f ts."$machine"
        vagrant box remove mocyber/ts."$machine"
    done
    echo "This may take some time... waiting 30 secs"
}


###############################################################################
# Start Program
###############################################################################

if [[ $machine == "Mac" ]]; then
    CPU="${MACCPU}"
    MEM="${MACMEM}"
    DISK="${MACDISK}"
else
    CPU="${NOTMACCPU}"
    MEM="${NOTMACMEM}"
    DISK="${NOTMACDISK}"
fi

main
