#! /bin/bash


##################
# define variables
##################

CENTOS=""
WINDOWS=""




##################
# define functions
##################

banner_main() {
    echo "###########################################"
    echo "##        THREMULATION STATION           ##"
    echo "##                                       ##"
    echo "###########################################"
    echo "1. Deploy New Thremulation Range"
    echo "2. Check Status of Existing Deployment"
    echo "3. Management Tasks on Existing Deployment"
    echo "4. Quit Control CLI"
}

banner_deploy() {
    echo "###########################################"
    echo "###  DEPLOY                             ###"
    echo "###########################################"
    echo "1. Quick Deployment -  Download and Deploy everything"
    echo "2. Custom Deployment - Choose your own adventure."
    echo "(B)ack to Main Menu"
}

banner_deployquick() {
    echo "###########################################"
    echo "###  QUICK DEPLOY                       ###"
    echo "###########################################"
    echo "(B)ack to Main Menu"
}

banner_deploycustom() {
    echo "###########################################"
    echo "###  CUSTOM DEPLOY                      ###"
    echo "###########################################"
    echo "(B)ack to Main Menu"
}

banner_check() {
    echo "###########################################"
    echo "###  STATUS                             ###"
    echo "###########################################"
    echo "(B)ack to Main Menu"
}

banner_manage() {
    echo "###########################################"
    echo "###  MANAGE                             ###"
    echo "###########################################"
    echo "(B)ack to Main Menu"
    echo ""
    echo "1. Update - get local boxes to latest version"
    echo "2. Reboot - restart current boxes - troubleshooting"
    echo "3. Clear data - delete index data"
    echo "4. Soft Reset - revert to original snapshot"
    echo "5. Hard Reset - remove and redeploy boxes"
    echo "6. Nuke and Pave - Burn it down and start over"
    echo "7. Back to Main Menu"
}

### Main Menu
main() {
    while true; do
        clear
        banner_main
        echo ""
        read -p "Enter the number of your selection [1/2/3]: " yn
        case $yn in
            [1]* ) deploy; break;;
            [2]* ) check; break;;
            [3]* ) manage; break;;
            [4]* ) echo "-- Quiting --"; sleep 1; clear; break;;
            * ) echo "Selection invalid, try again.";;
        esac
    done
}

# Main deployment screen, ask for quick or custom
deploy() {
    # Brainstorm: add an if statement to check if 'vagrant' is a valid command
    # if not, ask user to check docs for installing requirements
    while true; do
        clear
        banner_deploy
        echo ""
        read -p "What kind of deployment would you like? [1 / 2]: " yn
        case $yn in
            [1]* ) deploy_quick; break;;
            [2]* ) deploy_custom; break;;
            [Bb]* ) clear; main;break;;
            * ) echo "Selection invalid, try again.";;
        esac
    done
}


# Quick deploy is all the things
deploy_quick() {
    while true; do
        clear
        banner_deployquick   
        echo ""
        echo "You have chosen to Quick Deploy all nodes, whick includes the following:"
        echo "  Elastomic -- The control node used to EMULATE and DETECT activity"
        echo "  Windows10 -- Fully updated Windows client machine, primary target"
        echo "  Centos -- Linux server target providing several standard services"
        read -p "Is this configuration correct? [Y/N]: " yn 
        case $yn in
            [Yy]* ) vagrant up; sleep 20; snapshot; break;; 
            [Nn]* ) deploy; break;;
            [Bb]* ) clear; main;break;;
            * ) echo "Selection invalid, try again.";;
        esac
        # snapshot # create a snapshot
    done
}


# Custom deploy consists of elastomic box PLUS:
deploy_custom() {
    while true; do
        clear
        banner_deploycustom
        echo 'The "elastomic" box is the first and pivotal node.'
        echo "What _target_ nodes would you like to deploy?"
        echo ""
        read -p "Do you want deploy the Windows10 target node? [Y/N]: " yn
        case $yn in
            [Yy]* ) WINDOWS="windows10"; break;;
            [Nn]* ) WINDOWS=""; break;;
        esac
    done
    while true; do
        clear
        banner_deploycustom
        read -p "Do you deploy the Centos7 target node? [Y/N]: " yn
        case $yn in
            [Yy]* ) CENTOS="centos"; break;;
            [Nn]* ) CENTOS=""; break;;
            * ) echo "Please answer yes or no.";;
        esac
    done
    while true; do
        clear
        banner_deploycustom
        echo ""
        echo "You have chosen to deploy the following additional target nodes:"
        echo "${WINDOWS}"
        echo "${CENTOS}"
        read -p "Is this configuration correct? [Y/N]: " yn 
        case $yn in
            [Yy]* ) vagrant up elastomic ${CENTOS} ${WINDOWS}; sleep 20; snapshot; break;; 
            [Nn]* ) deploy; break;;
            [Bb]* ) clear; main;break;; # back to main menubreak;;
            * ) echo "Selection invalid, try again.";;
        esac
    done
    che
}

# Display the status of current environment
check() {
    while true; do
        clear
        banner_check
        echo ""
        echo "We are going to check the status of thremulation station "
        echo "Checking machine States. Each of the machine installed should "
        echo "look something like this: "
        echo "elastomic                 running (virtualbox)"
        echo "windows10                 running (virtualbox)"
        echo "centos                    running (virtualbox)"
        echo ""
        vagrant status
        echo ""
        echo "Looking at status for our elasticsearch service, status should be 'yellow' because we only have 1 node"
        check_indexes
        echo ""
        echo "Looking at status for our kibana service, If it replies with '200', then everything is OK "
        echo ""
        curl -s -o /dev/null -w "%{http_code}" -kIu vagrant:vagrant http://127.0.0.1:5601/api/status
        echo ""
        read -p "Return to Main Menu (M) or Cancel (C) ? " yn
        case $yn in
            [Mm]* ) deploy_quick; break;;
            [Cc]* ) break;;
            [Bb]* ) clear; main;break;;
            * ) echo "Please answer (M)ain Menu or (C)ancel.";;
        esac
    done
}

check_indexes() {
    curl -X GET "localhost:9200/_cluster/health?pretty"
}

delete_indexes() {
    curl -X DELETE "localhost:9200/logs*"
}

# Function to perform management tasks
manage() {
    while true; do
        clear
        banner_manage
        echo ""
        read -p "Select an available management task: " yn
        case $yn in
            [1]* ) echo "Updating boxes to the latest version, pulling from vagrant cloud"; break;; # display output, then run check()
            [2]* ) echo "Rebooting Boxes..."; break;; # display output, then run check()
            [3]* ) echo "Clearing all indexes"; delete_indexes; break;; # run check_indexes
            [4]* ) echo "Performing a soft reset , reverting to initial snapshot..."; snapshot_restore; break;;
            [5]* ) echo "Performing a hard reset, deleting VMs but keeping the disk images that spawned them"; vagrant destroy -f; break;;
            [6]* ) echo "Nuke and Pave, it's as bad as it sounds...your starting from nothing."; nuke_pave; break;;
            [7]* ) clear; main;break;;
            * ) echo " Choose your option [ 1 - 7 ]";;
        esac
    done
    check
}

snapshot() {
    echo " Creating Snapshot...just in case"
    for machine in elastomic centos windows10
    do
        vagrant snapshot "$machine" "$machine"_initial
    done
    echo "This may take some time to accomplish...waiting 30 secs"
}

snapshot_restore() {
    echo "Restoring Snapshot..."
    for machine in elastomic centos windows10
    do
        vagrant restore "$machine" "$machine"_initial
    done
    echo "This may take some time to accomplish...waiting 30 secs"
}

nuke_pave() {
    echo "Burn Baby Burn..."
    for machine in elastomic centos windows10
    do
        vagrant destroy -f "$machine"
        vagrant box remove mocyber/"$machine"
    done
    echo "This may take some time to accomplish...waiting 30 secs"
}

##################
# Start Program
##################

main


